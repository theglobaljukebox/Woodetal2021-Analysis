from __future__ import print_function
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pickle
import csv
from collections import Counter 
from collections import *
import math
import json
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request

SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
SPREADSHEET_ID = '1AjynK9mMQTw58B_B8b_ZIip3fyUm-aoV7Pp21HziBb0'
RANGE_NAME = 'canto_codings!A2:AT'
HEADER_RANGE = 'canto_codings!A1:AT1'

metadata = pd.read_csv('./data/metadata.csv')
with open('./data/conversion_guide.json') as f:
    conversion_guide = json.load(f)

def read_google_sheets(SPREADSHEET_ID, RANGE_NAME, HEADER_RANGE):
    creds = None
    # autogenerated
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.pickle', 'wb') as token:
            pickle.dump(creds, token)

    service = build('sheets', 'v4', credentials=creds)

    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID,
                                range=RANGE_NAME).execute()
    
    header = sheet.values().get(spreadsheetId=SPREADSHEET_ID,
                               range=HEADER_RANGE).execute()
    
    header_values = header.get('values', [])
    values = result.get('values', [])
    
    return values, header_values


def download_and_save():
    data, header = read_google_sheets(SPREADSHEET_ID, RANGE_NAME, HEADER_RANGE)
    downloaded_data = pd.DataFrame(data, columns = header[0])
    try:
        if(downloaded_data.loc[0, 'canto_coding_id'] == 'song_id'):
            downloaded_data = downloaded_data.drop([0])
    except:
        print("no error")
    downloaded_data.to_csv('./data/downloaded_data.csv')


def convert_row(input_matrix, i, df, feature_cols):
    for col, row in input_matrix.items():
        if col in feature_cols:
            for item in conversion_guide[col]:
                if int(item["code"])==int(row[i]):
                    soc_id = input_matrix.loc[i, "society_id"]
                    df.loc[i,col] = item["display_code"]

def convert_data():
    df = pd.read_csv('./data/downloaded_data.csv')
    df2 = df.drop(columns=['orv_1', 'orv_2', 'ensemble_value_id',
        'ensemble_value_label', 'instrument_value_id',
        'instrument_value_label','Unnamed: 0'])
    feature_cols = ["line_"+str(i+1) for i in range(37)]
    for i in range(len(df2)):
        if(i % 50 == 0):
            print("Converting row:", i)
        convert_row(df2[i:(i+1)],i, df,feature_cols)

if __name__ == '__main__':
    download_and_save()
    convert_data()
